# Generated by Django 2.2.2 on 2020-12-03 06:07

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('calls', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Homeassets',
            fields=[
                ('code', models.CharField(max_length=32, primary_key=True, serialize=False)),
                ('text', models.CharField(max_length=32)),
                ('order', models.PositiveSmallIntegerField()),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Incomecontributor',
            fields=[
                ('code', models.CharField(max_length=32, primary_key=True, serialize=False)),
                ('text', models.CharField(max_length=32)),
                ('order', models.PositiveSmallIntegerField()),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Scholarshipapplication',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submitted', models.BooleanField()),
                ('state', models.CharField(choices=[('draft', 'Draft'), ('submitted', 'Submitted'), ('validated', 'Validated'), ('noncompliant', 'Non Compliant'), ('reviewed', 'Reviewed'), ('rejected', 'Rejected'), ('selected_for_funding', 'Selected for Funding')], default='submitted', max_length=20)),
                ('selected_for_funding', models.BooleanField(blank=True, null=True)),
                ('selected_for_funding_comments', models.TextField(blank=True, null=True)),
                ('funding_email_sent', models.BooleanField(default=False)),
                ('application_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('programme_applied_for', models.CharField(help_text='e.g. Bachelor of Science Agriculture', max_length=100, null=True)),
                ('first_name', models.CharField(max_length=50, null=True)),
                ('gender', models.CharField(choices=[(None, '---please select---'), ('female', 'Female'), ('male', 'Male')], max_length=6, null=True)),
                ('last_name', models.CharField(max_length=50, null=True)),
                ('other_names', models.CharField(blank=True, max_length=100, null=True)),
                ('passport_photo', models.FileField(blank=True, help_text='Please attach passport size photograph', null=True, upload_to='')),
                ('passport_no', models.CharField(help_text='Please include National Identity Card Number/Passport number/Birth certificate number', max_length=16, null=True)),
                ('date_of_birth', models.DateField(null=True)),
                ('english_in_high_school', models.BooleanField(choices=[(None, '---please select---'), (True, 'Yes'), (False, 'No')])),
                ('scholarship_call_source', models.CharField(choices=[(None, '---please select---'), ('radio', 'Radio'), ('newspaper', 'Newspaper'), ('poster', 'Poster'), ('ruforum', 'RUFORUM staff'), ('school', 'Former school/university'), ('friend', 'Friend or word of mouth'), ('website', 'Website'), ('others', 'Others (Specify)')], max_length=32, null=True)),
                ('compliance_comments', models.TextField(blank=True, null=True)),
                ('validated_academic_document', models.BooleanField(blank=True, null=True, verbose_name='Validated Academic Documents')),
                ('validated_reference_letters', models.BooleanField(blank=True, null=True)),
                ('call', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='applications', to='calls.Call')),
                ('polymorphic_ctype', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('reviewers', models.ManyToManyField(blank=True, related_name='reviewer', to=settings.AUTH_USER_MODEL)),
                ('scholarship_manager', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='scholarship_manager', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
                ('validators', models.ManyToManyField(blank=True, related_name='scholarshipvalidators', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'permissions': (('assign_scholarship_reviewers', 'Can assign scholarship reviewers'), ('make_scholarship_permissions', 'Can make scholarship decision'), ('validate_scholarship_applications', 'Can validate scholarship Applications')),
                'unique_together': {('user', 'call')},
            },
        ),
        migrations.CreateModel(
            name='ScholarShipType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_name', models.CharField(max_length=300)),
            ],
        ),
        migrations.CreateModel(
            name='Typeoffloor',
            fields=[
                ('code', models.CharField(max_length=32, primary_key=True, serialize=False)),
                ('text', models.CharField(max_length=32)),
                ('order', models.PositiveSmallIntegerField()),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Typeofhousewall',
            fields=[
                ('code', models.CharField(max_length=32, primary_key=True, serialize=False)),
                ('text', models.CharField(max_length=32)),
                ('order', models.PositiveSmallIntegerField()),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Typeofroofingmaterial',
            fields=[
                ('code', models.CharField(max_length=32, primary_key=True, serialize=False)),
                ('text', models.CharField(max_length=32)),
                ('order', models.PositiveSmallIntegerField()),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Otherscholarshipapplication',
            fields=[
                ('scholarshipapplication_ptr', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='scholarships.Scholarshipapplication')),
                ('marital_status', models.CharField(choices=[(None, '---please select---'), ('single', 'Single'), ('married', 'Married'), ('divorced', 'Divorced'), ('widowed', 'Widowed')], max_length=8)),
                ('place_of_birth', models.CharField(max_length=100, null=True)),
                ('country_of_residence', models.CharField(choices=[(None, '---please select---'), ('RUFORUM member countries', (('BW', 'Botswana'), ('BI', 'Burundi'), ('CD', 'Congo - Kinshasa'), ('ET', 'Ethiopia'), ('KE', 'Kenya'), ('LS', 'Lesotho'), ('MW', 'Malawi'), ('MZ', 'Mozambique'), ('NA', 'Namibia'), ('RW', 'Rwanda'), ('ZA', 'South Africa'), ('SD', 'Sudan'), ('SS', 'South Sudan'), ('SZ', 'Swaziland'), ('TZ', 'Tanzania'), ('UG', 'Uganda'), ('ZM', 'Zambia'), ('ZW', 'Zimbabwe'))), ('Rest of the world', (('AF', 'Afghanistan'), ('AL', 'Albania'), ('DZ', 'Algeria'), ('AS', 'American Samoa'), ('AD', 'Andorra'), ('AO', 'Angola'), ('AI', 'Anguilla'), ('AQ', 'Antarctica'), ('AG', 'Antigua and Barbuda'), ('AR', 'Argentina'), ('AM', 'Armenia'), ('AW', 'Aruba'), ('AU', 'Australia'), ('AT', 'Austria'), ('AZ', 'Azerbaijan'), ('BS', 'Bahamas'), ('BH', 'Bahrain'), ('BD', 'Bangladesh'), ('BB', 'Barbados'), ('BY', 'Belarus'), ('BE', 'Belgium'), ('BZ', 'Belize'), ('BJ', 'Benin'), ('BM', 'Bermuda'), ('BT', 'Bhutan'), ('BO', 'Bolivia'), ('BA', 'Bosnia and Herzegovina'), ('BV', 'Bouvet Island'), ('BR', 'Brazil'), ('BQ', 'British Antarctic Territory'), ('IO', 'British Indian Ocean Territory'), ('VG', 'British Virgin Islands'), ('BN', 'Brunei'), ('BG', 'Bulgaria'), ('BF', 'Burkina Faso'), ('KH', 'Cambodia'), ('CM', 'Cameroon'), ('CA', 'Canada'), ('CT', 'Canton and Enderbury Islands'), ('CV', 'Cape Verde'), ('KY', 'Cayman Islands'), ('CF', 'Central African Republic'), ('TD', 'Chad'), ('CL', 'Chile'), ('CN', 'China'), ('CX', 'Christmas Island'), ('CC', 'Cocos [Keeling] Islands'), ('CO', 'Colombia'), ('KM', 'Comoros'), ('CG', 'Congo - Brazzaville'), ('CK', 'Cook Islands'), ('CR', 'Costa Rica'), ('HR', 'Croatia'), ('CU', 'Cuba'), ('CY', 'Cyprus'), ('CZ', 'Czech Republic'), ('CI', 'Côte d’Ivoire'), ('DK', 'Denmark'), ('DJ', 'Djibouti'), ('DM', 'Dominica'), ('DO', 'Dominican Republic'), ('NQ', 'Dronning Maud Land'), ('DD', 'East Germany'), ('EC', 'Ecuador'), ('EG', 'Egypt'), ('SV', 'El Salvador'), ('GQ', 'Equatorial Guinea'), ('ER', 'Eritrea'), ('EE', 'Estonia'), ('FK', 'Falkland Islands'), ('FO', 'Faroe Islands'), ('FJ', 'Fiji'), ('FI', 'Finland'), ('FR', 'France'), ('GF', 'French Guiana'), ('PF', 'French Polynesia'), ('TF', 'French Southern Territories'), ('FQ', 'French Southern and Antarctic Territories'), ('GA', 'Gabon'), ('GM', 'Gambia'), ('GE', 'Georgia'), ('DE', 'Germany'), ('GH', 'Ghana'), ('GI', 'Gibraltar'), ('GR', 'Greece'), ('GL', 'Greenland'), ('GD', 'Grenada'), ('GP', 'Guadeloupe'), ('GU', 'Guam'), ('GT', 'Guatemala'), ('GG', 'Guernsey'), ('GN', 'Guinea'), ('GW', 'Guinea-Bissau'), ('GY', 'Guyana'), ('HT', 'Haiti'), ('HM', 'Heard Island and McDonald Islands'), ('HN', 'Honduras'), ('HK', 'Hong Kong SAR China'), ('HU', 'Hungary'), ('IS', 'Iceland'), ('IN', 'India'), ('ID', 'Indonesia'), ('IR', 'Iran'), ('IQ', 'Iraq'), ('IE', 'Ireland'), ('IM', 'Isle of Man'), ('IL', 'Israel'), ('IT', 'Italy'), ('JM', 'Jamaica'), ('JP', 'Japan'), ('JE', 'Jersey'), ('JT', 'Johnston Island'), ('JO', 'Jordan'), ('KZ', 'Kazakhstan'), ('KI', 'Kiribati'), ('KW', 'Kuwait'), ('KG', 'Kyrgyzstan'), ('LA', 'Laos'), ('LV', 'Latvia'), ('LB', 'Lebanon'), ('LR', 'Liberia'), ('LY', 'Libya'), ('LI', 'Liechtenstein'), ('LT', 'Lithuania'), ('LU', 'Luxembourg'), ('MO', 'Macau SAR China'), ('MK', 'Macedonia'), ('MG', 'Madagascar'), ('MY', 'Malaysia'), ('MV', 'Maldives'), ('ML', 'Mali'), ('MT', 'Malta'), ('MH', 'Marshall Islands'), ('MQ', 'Martinique'), ('MR', 'Mauritania'), ('MU', 'Mauritius'), ('YT', 'Mayotte'), ('FX', 'Metropolitan France'), ('MX', 'Mexico'), ('FM', 'Micronesia'), ('MI', 'Midway Islands'), ('MD', 'Moldova'), ('MC', 'Monaco'), ('MN', 'Mongolia'), ('ME', 'Montenegro'), ('MS', 'Montserrat'), ('MA', 'Morocco'), ('MM', 'Myanmar [Burma]'), ('NR', 'Nauru'), ('NP', 'Nepal'), ('NL', 'Netherlands'), ('AN', 'Netherlands Antilles'), ('NT', 'Neutral Zone'), ('NC', 'New Caledonia'), ('NZ', 'New Zealand'), ('NI', 'Nicaragua'), ('NE', 'Niger'), ('NG', 'Nigeria'), ('NU', 'Niue'), ('NF', 'Norfolk Island'), ('KP', 'North Korea'), ('VD', 'North Vietnam'), ('MP', 'Northern Mariana Islands'), ('NO', 'Norway'), ('OM', 'Oman'), ('PC', 'Pacific Islands Trust Territory'), ('PK', 'Pakistan'), ('PW', 'Palau'), ('PS', 'Palestinian Territories'), ('PA', 'Panama'), ('PZ', 'Panama Canal Zone'), ('PG', 'Papua New Guinea'), ('PY', 'Paraguay'), ('YD', 'People&#39;s Democratic Republic of Yemen'), ('PE', 'Peru'), ('PH', 'Philippines'), ('PN', 'Pitcairn Islands'), ('PL', 'Poland'), ('PT', 'Portugal'), ('PR', 'Puerto Rico'), ('QA', 'Qatar'), ('RO', 'Romania'), ('RU', 'Russia'), ('RE', 'Réunion'), ('BL', 'Saint Barthélemy'), ('SH', 'Saint Helena'), ('KN', 'Saint Kitts and Nevis'), ('LC', 'Saint Lucia'), ('MF', 'Saint Martin'), ('PM', 'Saint Pierre and Miquelon'), ('VC', 'Saint Vincent and the Grenadines'), ('WS', 'Samoa'), ('SM', 'San Marino'), ('SA', 'Saudi Arabia'), ('SN', 'Senegal'), ('RS', 'Serbia'), ('CS', 'Serbia and Montenegro'), ('SC', 'Seychelles'), ('SL', 'Sierra Leone'), ('SG', 'Singapore'), ('SK', 'Slovakia'), ('SI', 'Slovenia'), ('SB', 'Solomon Islands'), ('SO', 'Somalia'), ('GS', 'South Georgia and the South Sandwich Islands'), ('KR', 'South Korea'), ('ES', 'Spain'), ('LK', 'Sri Lanka'), ('SR', 'Suriname'), ('SJ', 'Svalbard and Jan Mayen'), ('SE', 'Sweden'), ('CH', 'Switzerland'), ('SY', 'Syria'), ('ST', 'São Tomé and Príncipe'), ('TW', 'Taiwan'), ('TJ', 'Tajikistan'), ('TH', 'Thailand'), ('TL', 'Timor-Leste'), ('TG', 'Togo'), ('TK', 'Tokelau'), ('TO', 'Tonga'), ('TT', 'Trinidad and Tobago'), ('TN', 'Tunisia'), ('TR', 'Turkey'), ('TM', 'Turkmenistan'), ('TC', 'Turks and Caicos Islands'), ('TV', 'Tuvalu'), ('UM', 'U.S. Minor Outlying Islands'), ('PU', 'U.S. Miscellaneous Pacific Islands'), ('VI', 'U.S. Virgin Islands'), ('UA', 'Ukraine'), ('SU', 'Union of Soviet Socialist Republics'), ('AE', 'United Arab Emirates'), ('GB', 'United Kingdom'), ('US', 'United States'), ('ZZ', 'Unknown or Invalid Region'), ('UY', 'Uruguay'), ('UZ', 'Uzbekistan'), ('VU', 'Vanuatu'), ('VA', 'Vatican City'), ('VE', 'Venezuela'), ('VN', 'Vietnam'), ('WK', 'Wake Island'), ('WF', 'Wallis and Futuna'), ('EH', 'Western Sahara'), ('YE', 'Yemen'), ('AX', 'Åland Islands')))], max_length=3, null=True)),
                ('residence_contact_address', models.TextField(null=True)),
                ('contact_email', models.EmailField(max_length=254, null=True)),
                ('telephone_contacts', phonenumber_field.modelfields.PhoneNumberField(help_text='Include Mobile phone number if available. If not available include for any relative / neighbor / local administrator closest to you', max_length=20, null=True, region=None)),
                ('experience', models.TextField(blank=True, help_text='Using concrete examples, briefly describe your experience (Make reference to work experience, knowledge, skills, and abilities that you have)', null=True)),
                ('research_experience', models.TextField()),
                ('research_location', models.CharField(choices=[(None, '---please select---'), ('RUFORUM member countries', (('BW', 'Botswana'), ('BI', 'Burundi'), ('CD', 'Congo - Kinshasa'), ('ET', 'Ethiopia'), ('KE', 'Kenya'), ('LS', 'Lesotho'), ('MW', 'Malawi'), ('MZ', 'Mozambique'), ('NA', 'Namibia'), ('RW', 'Rwanda'), ('ZA', 'South Africa'), ('SD', 'Sudan'), ('SS', 'South Sudan'), ('SZ', 'Swaziland'), ('TZ', 'Tanzania'), ('UG', 'Uganda'), ('ZM', 'Zambia'), ('ZW', 'Zimbabwe'))), ('Rest of the world', (('AF', 'Afghanistan'), ('AL', 'Albania'), ('DZ', 'Algeria'), ('AS', 'American Samoa'), ('AD', 'Andorra'), ('AO', 'Angola'), ('AI', 'Anguilla'), ('AQ', 'Antarctica'), ('AG', 'Antigua and Barbuda'), ('AR', 'Argentina'), ('AM', 'Armenia'), ('AW', 'Aruba'), ('AU', 'Australia'), ('AT', 'Austria'), ('AZ', 'Azerbaijan'), ('BS', 'Bahamas'), ('BH', 'Bahrain'), ('BD', 'Bangladesh'), ('BB', 'Barbados'), ('BY', 'Belarus'), ('BE', 'Belgium'), ('BZ', 'Belize'), ('BJ', 'Benin'), ('BM', 'Bermuda'), ('BT', 'Bhutan'), ('BO', 'Bolivia'), ('BA', 'Bosnia and Herzegovina'), ('BV', 'Bouvet Island'), ('BR', 'Brazil'), ('BQ', 'British Antarctic Territory'), ('IO', 'British Indian Ocean Territory'), ('VG', 'British Virgin Islands'), ('BN', 'Brunei'), ('BG', 'Bulgaria'), ('BF', 'Burkina Faso'), ('KH', 'Cambodia'), ('CM', 'Cameroon'), ('CA', 'Canada'), ('CT', 'Canton and Enderbury Islands'), ('CV', 'Cape Verde'), ('KY', 'Cayman Islands'), ('CF', 'Central African Republic'), ('TD', 'Chad'), ('CL', 'Chile'), ('CN', 'China'), ('CX', 'Christmas Island'), ('CC', 'Cocos [Keeling] Islands'), ('CO', 'Colombia'), ('KM', 'Comoros'), ('CG', 'Congo - Brazzaville'), ('CK', 'Cook Islands'), ('CR', 'Costa Rica'), ('HR', 'Croatia'), ('CU', 'Cuba'), ('CY', 'Cyprus'), ('CZ', 'Czech Republic'), ('CI', 'Côte d’Ivoire'), ('DK', 'Denmark'), ('DJ', 'Djibouti'), ('DM', 'Dominica'), ('DO', 'Dominican Republic'), ('NQ', 'Dronning Maud Land'), ('DD', 'East Germany'), ('EC', 'Ecuador'), ('EG', 'Egypt'), ('SV', 'El Salvador'), ('GQ', 'Equatorial Guinea'), ('ER', 'Eritrea'), ('EE', 'Estonia'), ('FK', 'Falkland Islands'), ('FO', 'Faroe Islands'), ('FJ', 'Fiji'), ('FI', 'Finland'), ('FR', 'France'), ('GF', 'French Guiana'), ('PF', 'French Polynesia'), ('TF', 'French Southern Territories'), ('FQ', 'French Southern and Antarctic Territories'), ('GA', 'Gabon'), ('GM', 'Gambia'), ('GE', 'Georgia'), ('DE', 'Germany'), ('GH', 'Ghana'), ('GI', 'Gibraltar'), ('GR', 'Greece'), ('GL', 'Greenland'), ('GD', 'Grenada'), ('GP', 'Guadeloupe'), ('GU', 'Guam'), ('GT', 'Guatemala'), ('GG', 'Guernsey'), ('GN', 'Guinea'), ('GW', 'Guinea-Bissau'), ('GY', 'Guyana'), ('HT', 'Haiti'), ('HM', 'Heard Island and McDonald Islands'), ('HN', 'Honduras'), ('HK', 'Hong Kong SAR China'), ('HU', 'Hungary'), ('IS', 'Iceland'), ('IN', 'India'), ('ID', 'Indonesia'), ('IR', 'Iran'), ('IQ', 'Iraq'), ('IE', 'Ireland'), ('IM', 'Isle of Man'), ('IL', 'Israel'), ('IT', 'Italy'), ('JM', 'Jamaica'), ('JP', 'Japan'), ('JE', 'Jersey'), ('JT', 'Johnston Island'), ('JO', 'Jordan'), ('KZ', 'Kazakhstan'), ('KI', 'Kiribati'), ('KW', 'Kuwait'), ('KG', 'Kyrgyzstan'), ('LA', 'Laos'), ('LV', 'Latvia'), ('LB', 'Lebanon'), ('LR', 'Liberia'), ('LY', 'Libya'), ('LI', 'Liechtenstein'), ('LT', 'Lithuania'), ('LU', 'Luxembourg'), ('MO', 'Macau SAR China'), ('MK', 'Macedonia'), ('MG', 'Madagascar'), ('MY', 'Malaysia'), ('MV', 'Maldives'), ('ML', 'Mali'), ('MT', 'Malta'), ('MH', 'Marshall Islands'), ('MQ', 'Martinique'), ('MR', 'Mauritania'), ('MU', 'Mauritius'), ('YT', 'Mayotte'), ('FX', 'Metropolitan France'), ('MX', 'Mexico'), ('FM', 'Micronesia'), ('MI', 'Midway Islands'), ('MD', 'Moldova'), ('MC', 'Monaco'), ('MN', 'Mongolia'), ('ME', 'Montenegro'), ('MS', 'Montserrat'), ('MA', 'Morocco'), ('MM', 'Myanmar [Burma]'), ('NR', 'Nauru'), ('NP', 'Nepal'), ('NL', 'Netherlands'), ('AN', 'Netherlands Antilles'), ('NT', 'Neutral Zone'), ('NC', 'New Caledonia'), ('NZ', 'New Zealand'), ('NI', 'Nicaragua'), ('NE', 'Niger'), ('NG', 'Nigeria'), ('NU', 'Niue'), ('NF', 'Norfolk Island'), ('KP', 'North Korea'), ('VD', 'North Vietnam'), ('MP', 'Northern Mariana Islands'), ('NO', 'Norway'), ('OM', 'Oman'), ('PC', 'Pacific Islands Trust Territory'), ('PK', 'Pakistan'), ('PW', 'Palau'), ('PS', 'Palestinian Territories'), ('PA', 'Panama'), ('PZ', 'Panama Canal Zone'), ('PG', 'Papua New Guinea'), ('PY', 'Paraguay'), ('YD', 'People&#39;s Democratic Republic of Yemen'), ('PE', 'Peru'), ('PH', 'Philippines'), ('PN', 'Pitcairn Islands'), ('PL', 'Poland'), ('PT', 'Portugal'), ('PR', 'Puerto Rico'), ('QA', 'Qatar'), ('RO', 'Romania'), ('RU', 'Russia'), ('RE', 'Réunion'), ('BL', 'Saint Barthélemy'), ('SH', 'Saint Helena'), ('KN', 'Saint Kitts and Nevis'), ('LC', 'Saint Lucia'), ('MF', 'Saint Martin'), ('PM', 'Saint Pierre and Miquelon'), ('VC', 'Saint Vincent and the Grenadines'), ('WS', 'Samoa'), ('SM', 'San Marino'), ('SA', 'Saudi Arabia'), ('SN', 'Senegal'), ('RS', 'Serbia'), ('CS', 'Serbia and Montenegro'), ('SC', 'Seychelles'), ('SL', 'Sierra Leone'), ('SG', 'Singapore'), ('SK', 'Slovakia'), ('SI', 'Slovenia'), ('SB', 'Solomon Islands'), ('SO', 'Somalia'), ('GS', 'South Georgia and the South Sandwich Islands'), ('KR', 'South Korea'), ('ES', 'Spain'), ('LK', 'Sri Lanka'), ('SR', 'Suriname'), ('SJ', 'Svalbard and Jan Mayen'), ('SE', 'Sweden'), ('CH', 'Switzerland'), ('SY', 'Syria'), ('ST', 'São Tomé and Príncipe'), ('TW', 'Taiwan'), ('TJ', 'Tajikistan'), ('TH', 'Thailand'), ('TL', 'Timor-Leste'), ('TG', 'Togo'), ('TK', 'Tokelau'), ('TO', 'Tonga'), ('TT', 'Trinidad and Tobago'), ('TN', 'Tunisia'), ('TR', 'Turkey'), ('TM', 'Turkmenistan'), ('TC', 'Turks and Caicos Islands'), ('TV', 'Tuvalu'), ('UM', 'U.S. Minor Outlying Islands'), ('PU', 'U.S. Miscellaneous Pacific Islands'), ('VI', 'U.S. Virgin Islands'), ('UA', 'Ukraine'), ('SU', 'Union of Soviet Socialist Republics'), ('AE', 'United Arab Emirates'), ('GB', 'United Kingdom'), ('US', 'United States'), ('ZZ', 'Unknown or Invalid Region'), ('UY', 'Uruguay'), ('UZ', 'Uzbekistan'), ('VU', 'Vanuatu'), ('VA', 'Vatican City'), ('VE', 'Venezuela'), ('VN', 'Vietnam'), ('WK', 'Wake Island'), ('WF', 'Wallis and Futuna'), ('EH', 'Western Sahara'), ('YE', 'Yemen'), ('AX', 'Åland Islands')))], max_length=4, null=True)),
                ('research_location_reason', models.TextField()),
                ('name_of_university', models.CharField(max_length=50, null=True)),
                ('research_concept_note', models.FileField(blank=True, null=True, upload_to='')),
                ('employer_support', models.BooleanField(default=True)),
                ('support_evidence', models.FileField(null=True, upload_to='')),
                ('have_additional_funding', models.BooleanField(default=False)),
                ('specify_funding_type', models.TextField(blank=True, null=True)),
                ('funding_type', models.CharField(blank=True, choices=[(None, '--please select--'), ('research', 'Research'), ('tuition', 'Tuition')], max_length=200, null=True)),
                ('already_funded', models.BooleanField(null=True)),
                ('amount_provided', models.DecimalField(blank=True, decimal_places=2, max_digits=65, null=True)),
                ('other_call_source', models.CharField(blank=True, help_text="Please specify if you selected 'others' above", max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Workexperience',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('organisation', models.CharField(max_length=300)),
                ('employed_from', models.DateField(blank=True, null=True)),
                ('employed_to', models.DateField(blank=True, null=True)),
                ('average_monthly_salary', models.IntegerField(blank=True)),
                ('reason_for_leaving', models.CharField(blank=True, max_length=100)),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scholarships.Scholarshipapplication')),
            ],
        ),
        migrations.CreateModel(
            name='Transcriptfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(blank=True, null=True, upload_to='')),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scholarships.Scholarshipapplication')),
            ],
        ),
        migrations.CreateModel(
            name='Scholarship',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scholarship_id', models.CharField(blank=True, max_length=50, null=True)),
                ('programme_applied_for', models.CharField(max_length=50, null=True)),
                ('institution', models.CharField(max_length=50, null=True)),
                ('start_date', models.DateField(null=True)),
                ('end_date', models.DateField(null=True)),
                ('scholarship_year', models.CharField(max_length=20)),
                ('generated_number', models.IntegerField(default=1, null=True)),
                ('reporting_period', models.PositiveIntegerField(blank=True, choices=[(None, '--please select--'), (3, '3 Months'), (6, '6 Months')], null=True)),
                ('report_number', models.PositiveIntegerField(blank=True, null=True)),
                ('approval_status', models.CharField(choices=[('approved', 'Approved'), ('not_approved', 'Not Approved')], default='approved', max_length=30)),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scholarships.Scholarshipapplication')),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='scholarship_approvals', to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Referenceletter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('referee_names', models.CharField(max_length=300, null=True)),
                ('referee_address', models.TextField(null=True)),
                ('contact_details', models.TextField(null=True)),
                ('file', models.FileField(null=True, upload_to='')),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scholarships.Scholarshipapplication')),
            ],
        ),
        migrations.CreateModel(
            name='Othereducation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('qualification', models.CharField(max_length=50, null=True)),
                ('institution', models.CharField(max_length=50, null=True)),
                ('country', models.CharField(choices=[(None, '---please select---'), ('RUFORUM member countries', (('BW', 'Botswana'), ('BI', 'Burundi'), ('CD', 'Congo - Kinshasa'), ('ET', 'Ethiopia'), ('KE', 'Kenya'), ('LS', 'Lesotho'), ('MW', 'Malawi'), ('MZ', 'Mozambique'), ('NA', 'Namibia'), ('RW', 'Rwanda'), ('ZA', 'South Africa'), ('SD', 'Sudan'), ('SS', 'South Sudan'), ('SZ', 'Swaziland'), ('TZ', 'Tanzania'), ('UG', 'Uganda'), ('ZM', 'Zambia'), ('ZW', 'Zimbabwe'))), ('Rest of the world', (('AF', 'Afghanistan'), ('AL', 'Albania'), ('DZ', 'Algeria'), ('AS', 'American Samoa'), ('AD', 'Andorra'), ('AO', 'Angola'), ('AI', 'Anguilla'), ('AQ', 'Antarctica'), ('AG', 'Antigua and Barbuda'), ('AR', 'Argentina'), ('AM', 'Armenia'), ('AW', 'Aruba'), ('AU', 'Australia'), ('AT', 'Austria'), ('AZ', 'Azerbaijan'), ('BS', 'Bahamas'), ('BH', 'Bahrain'), ('BD', 'Bangladesh'), ('BB', 'Barbados'), ('BY', 'Belarus'), ('BE', 'Belgium'), ('BZ', 'Belize'), ('BJ', 'Benin'), ('BM', 'Bermuda'), ('BT', 'Bhutan'), ('BO', 'Bolivia'), ('BA', 'Bosnia and Herzegovina'), ('BV', 'Bouvet Island'), ('BR', 'Brazil'), ('BQ', 'British Antarctic Territory'), ('IO', 'British Indian Ocean Territory'), ('VG', 'British Virgin Islands'), ('BN', 'Brunei'), ('BG', 'Bulgaria'), ('BF', 'Burkina Faso'), ('KH', 'Cambodia'), ('CM', 'Cameroon'), ('CA', 'Canada'), ('CT', 'Canton and Enderbury Islands'), ('CV', 'Cape Verde'), ('KY', 'Cayman Islands'), ('CF', 'Central African Republic'), ('TD', 'Chad'), ('CL', 'Chile'), ('CN', 'China'), ('CX', 'Christmas Island'), ('CC', 'Cocos [Keeling] Islands'), ('CO', 'Colombia'), ('KM', 'Comoros'), ('CG', 'Congo - Brazzaville'), ('CK', 'Cook Islands'), ('CR', 'Costa Rica'), ('HR', 'Croatia'), ('CU', 'Cuba'), ('CY', 'Cyprus'), ('CZ', 'Czech Republic'), ('CI', 'Côte d’Ivoire'), ('DK', 'Denmark'), ('DJ', 'Djibouti'), ('DM', 'Dominica'), ('DO', 'Dominican Republic'), ('NQ', 'Dronning Maud Land'), ('DD', 'East Germany'), ('EC', 'Ecuador'), ('EG', 'Egypt'), ('SV', 'El Salvador'), ('GQ', 'Equatorial Guinea'), ('ER', 'Eritrea'), ('EE', 'Estonia'), ('FK', 'Falkland Islands'), ('FO', 'Faroe Islands'), ('FJ', 'Fiji'), ('FI', 'Finland'), ('FR', 'France'), ('GF', 'French Guiana'), ('PF', 'French Polynesia'), ('TF', 'French Southern Territories'), ('FQ', 'French Southern and Antarctic Territories'), ('GA', 'Gabon'), ('GM', 'Gambia'), ('GE', 'Georgia'), ('DE', 'Germany'), ('GH', 'Ghana'), ('GI', 'Gibraltar'), ('GR', 'Greece'), ('GL', 'Greenland'), ('GD', 'Grenada'), ('GP', 'Guadeloupe'), ('GU', 'Guam'), ('GT', 'Guatemala'), ('GG', 'Guernsey'), ('GN', 'Guinea'), ('GW', 'Guinea-Bissau'), ('GY', 'Guyana'), ('HT', 'Haiti'), ('HM', 'Heard Island and McDonald Islands'), ('HN', 'Honduras'), ('HK', 'Hong Kong SAR China'), ('HU', 'Hungary'), ('IS', 'Iceland'), ('IN', 'India'), ('ID', 'Indonesia'), ('IR', 'Iran'), ('IQ', 'Iraq'), ('IE', 'Ireland'), ('IM', 'Isle of Man'), ('IL', 'Israel'), ('IT', 'Italy'), ('JM', 'Jamaica'), ('JP', 'Japan'), ('JE', 'Jersey'), ('JT', 'Johnston Island'), ('JO', 'Jordan'), ('KZ', 'Kazakhstan'), ('KI', 'Kiribati'), ('KW', 'Kuwait'), ('KG', 'Kyrgyzstan'), ('LA', 'Laos'), ('LV', 'Latvia'), ('LB', 'Lebanon'), ('LR', 'Liberia'), ('LY', 'Libya'), ('LI', 'Liechtenstein'), ('LT', 'Lithuania'), ('LU', 'Luxembourg'), ('MO', 'Macau SAR China'), ('MK', 'Macedonia'), ('MG', 'Madagascar'), ('MY', 'Malaysia'), ('MV', 'Maldives'), ('ML', 'Mali'), ('MT', 'Malta'), ('MH', 'Marshall Islands'), ('MQ', 'Martinique'), ('MR', 'Mauritania'), ('MU', 'Mauritius'), ('YT', 'Mayotte'), ('FX', 'Metropolitan France'), ('MX', 'Mexico'), ('FM', 'Micronesia'), ('MI', 'Midway Islands'), ('MD', 'Moldova'), ('MC', 'Monaco'), ('MN', 'Mongolia'), ('ME', 'Montenegro'), ('MS', 'Montserrat'), ('MA', 'Morocco'), ('MM', 'Myanmar [Burma]'), ('NR', 'Nauru'), ('NP', 'Nepal'), ('NL', 'Netherlands'), ('AN', 'Netherlands Antilles'), ('NT', 'Neutral Zone'), ('NC', 'New Caledonia'), ('NZ', 'New Zealand'), ('NI', 'Nicaragua'), ('NE', 'Niger'), ('NG', 'Nigeria'), ('NU', 'Niue'), ('NF', 'Norfolk Island'), ('KP', 'North Korea'), ('VD', 'North Vietnam'), ('MP', 'Northern Mariana Islands'), ('NO', 'Norway'), ('OM', 'Oman'), ('PC', 'Pacific Islands Trust Territory'), ('PK', 'Pakistan'), ('PW', 'Palau'), ('PS', 'Palestinian Territories'), ('PA', 'Panama'), ('PZ', 'Panama Canal Zone'), ('PG', 'Papua New Guinea'), ('PY', 'Paraguay'), ('YD', 'People&#39;s Democratic Republic of Yemen'), ('PE', 'Peru'), ('PH', 'Philippines'), ('PN', 'Pitcairn Islands'), ('PL', 'Poland'), ('PT', 'Portugal'), ('PR', 'Puerto Rico'), ('QA', 'Qatar'), ('RO', 'Romania'), ('RU', 'Russia'), ('RE', 'Réunion'), ('BL', 'Saint Barthélemy'), ('SH', 'Saint Helena'), ('KN', 'Saint Kitts and Nevis'), ('LC', 'Saint Lucia'), ('MF', 'Saint Martin'), ('PM', 'Saint Pierre and Miquelon'), ('VC', 'Saint Vincent and the Grenadines'), ('WS', 'Samoa'), ('SM', 'San Marino'), ('SA', 'Saudi Arabia'), ('SN', 'Senegal'), ('RS', 'Serbia'), ('CS', 'Serbia and Montenegro'), ('SC', 'Seychelles'), ('SL', 'Sierra Leone'), ('SG', 'Singapore'), ('SK', 'Slovakia'), ('SI', 'Slovenia'), ('SB', 'Solomon Islands'), ('SO', 'Somalia'), ('GS', 'South Georgia and the South Sandwich Islands'), ('KR', 'South Korea'), ('ES', 'Spain'), ('LK', 'Sri Lanka'), ('SR', 'Suriname'), ('SJ', 'Svalbard and Jan Mayen'), ('SE', 'Sweden'), ('CH', 'Switzerland'), ('SY', 'Syria'), ('ST', 'São Tomé and Príncipe'), ('TW', 'Taiwan'), ('TJ', 'Tajikistan'), ('TH', 'Thailand'), ('TL', 'Timor-Leste'), ('TG', 'Togo'), ('TK', 'Tokelau'), ('TO', 'Tonga'), ('TT', 'Trinidad and Tobago'), ('TN', 'Tunisia'), ('TR', 'Turkey'), ('TM', 'Turkmenistan'), ('TC', 'Turks and Caicos Islands'), ('TV', 'Tuvalu'), ('UM', 'U.S. Minor Outlying Islands'), ('PU', 'U.S. Miscellaneous Pacific Islands'), ('VI', 'U.S. Virgin Islands'), ('UA', 'Ukraine'), ('SU', 'Union of Soviet Socialist Republics'), ('AE', 'United Arab Emirates'), ('GB', 'United Kingdom'), ('US', 'United States'), ('ZZ', 'Unknown or Invalid Region'), ('UY', 'Uruguay'), ('UZ', 'Uzbekistan'), ('VU', 'Vanuatu'), ('VA', 'Vatican City'), ('VE', 'Venezuela'), ('VN', 'Vietnam'), ('WK', 'Wake Island'), ('WF', 'Wallis and Futuna'), ('EH', 'Western Sahara'), ('YE', 'Yemen'), ('AX', 'Åland Islands')))], max_length=3, null=True)),
                ('date_from', models.DateField(null=True)),
                ('date_to', models.DateField(null=True)),
                ('total_score', models.DecimalField(decimal_places=2, help_text='points / aggregate / grade / CGPA', max_digits=65, null=True)),
                ('major', models.CharField(blank=True, max_length=50, null=True)),
                ('file', models.FileField(null=True, upload_to='')),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scholarships.Scholarshipapplication')),
            ],
        ),
        migrations.CreateModel(
            name='Leadershipposition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.CharField(blank=True, max_length=50, null=True)),
                ('group', models.CharField(blank=True, max_length=50, null=True)),
                ('year', models.PositiveSmallIntegerField(blank=True, choices=[(2020, 2020), (2019, 2019), (2018, 2018), (2017, 2017), (2016, 2016), (2015, 2015), (2014, 2014), (2013, 2013), (2012, 2012), (2011, 2011), (2010, 2010), (2009, 2009), (2008, 2008), (2007, 2007), (2006, 2006), (2005, 2005), (2004, 2004), (2003, 2003), (2002, 2002), (2001, 2001), (2000, 2000), (1999, 1999), (1998, 1998), (1997, 1997), (1996, 1996), (1995, 1995), (1994, 1994), (1993, 1993), (1992, 1992), (1991, 1991), (1990, 1990)], null=True)),
                ('certificate', models.FileField(blank=True, help_text='please attach certificates of recognition if any', null=True, upload_to='')),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scholarships.Scholarshipapplication')),
            ],
        ),
        migrations.CreateModel(
            name='Householdincomesource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source', models.CharField(max_length=100)),
                ('amount', models.PositiveIntegerField(help_text='Amount of income per year (use local currency)')),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scholarships.Scholarshipapplication')),
            ],
        ),
        migrations.CreateModel(
            name='Groupassociationclub',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('role', models.CharField(max_length=50)),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scholarships.Scholarshipapplication')),
            ],
        ),
        migrations.CreateModel(
            name='Employmenthistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('organisation', models.CharField(blank=True, max_length=150, null=True)),
                ('organisation_address', models.TextField(blank=True, null=True)),
                ('professional_responsibilities', models.TextField(blank=True)),
                ('reason_for_leaving', models.TextField(blank=True, null=True)),
                ('employed_from', models.DateField(blank=True, null=True)),
                ('employed_to', models.DateField(blank=True, null=True)),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scholarships.Scholarshipapplication')),
            ],
        ),
        migrations.CreateModel(
            name='Currentvolunteering',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('involvement', models.CharField(max_length=100)),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scholarships.Scholarshipapplication')),
            ],
        ),
        migrations.CreateModel(
            name='Communityservice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity', models.CharField(max_length=50)),
                ('group', models.CharField(max_length=50)),
                ('year', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scholarships.Scholarshipapplication')),
            ],
        ),
        migrations.CreateModel(
            name='Scholarshipappreview',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mark', models.IntegerField(null=True)),
                ('comment', models.TextField(null=True)),
                ('recommendation', models.CharField(choices=[(None, '--please select--'), ('major', 'Major Revision'), ('minor', 'Minor Revision'), ('accept', 'Accept'), ('reject', 'Reject')], max_length=20, null=True)),
                ('review_form', models.FileField(null=True, upload_to='')),
                ('concept_note', models.FileField(blank=True, help_text='please add a concept note', null=True, upload_to='')),
                ('reviewed_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='scholarships.Scholarshipapplication')),
                ('reviewer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('application', 'reviewer')},
            },
        ),
        migrations.CreateModel(
            name='ResearchAndPublication',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(blank=True, choices=[(None, '---please select---'), ('bachelor', 'Bachelor'), ('master', 'Master'), ('other', 'Others')], max_length=50)),
                ('title', models.CharField(blank=True, max_length=200)),
                ('description', models.TextField()),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='researchandpublications', to='scholarships.Scholarshipapplication')),
            ],
            options={
                'unique_together': {('application', 'title')},
            },
        ),
        migrations.CreateModel(
            name='Publication',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=200, null=True)),
                ('published_file', models.FileField(blank=True, null=True, upload_to='')),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='publications', to='scholarships.Scholarshipapplication')),
            ],
            options={
                'unique_together': {('application', 'title')},
            },
        ),
        migrations.CreateModel(
            name='Parent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=100)),
                ('status', models.CharField(choices=[(None, '---please select---'), ('alive', 'Alive'), ('deceased', 'Deceased')], max_length=16)),
                ('date_of_death', models.DateField(blank=True, help_text='If deceased, give date of death', null=True)),
                ('death_certificate', models.FileField(blank=True, help_text='upload death certificate or letter from a reliable authority', null=True, upload_to='')),
                ('disability', models.TextField(blank=True, help_text='Does this parent have any disability? If YES please indicate the type of disability', null=True)),
                ('occupation', models.CharField(help_text='Occupation / Job Title either now or previously', max_length=100)),
                ('organisation', models.CharField(blank=True, help_text='Organization or Place of Work', max_length=150, null=True)),
                ('gross_annual_income', models.IntegerField(blank=True, help_text='Gross Annual Income (if parent not in formal employment, compute together the income from various sources)', null=True)),
                ('relationship', models.CharField(choices=[('father', 'Father'), ('mother', 'Mother')], max_length=6)),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scholarships.Scholarshipapplication')),
            ],
            options={
                'unique_together': {('relationship', 'application')},
            },
        ),
        migrations.CreateModel(
            name='Mastercardscholarshipapplication',
            fields=[
                ('scholarshipapplication_ptr', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='scholarships.Scholarshipapplication')),
                ('held_leadership_position', models.BooleanField(choices=[(None, '---please select---'), (True, 'Yes'), (False, 'No')])),
                ('cause_of_arrest', models.CharField(blank=True, help_text='what was the cause?', max_length=100, null=True)),
                ('challenge', models.TextField()),
                ('community_service_participation', models.BooleanField()),
                ('country_of_birth', models.CharField(choices=[(None, '---please select---'), ('RUFORUM member countries', (('BW', 'Botswana'), ('BI', 'Burundi'), ('CD', 'Congo - Kinshasa'), ('ET', 'Ethiopia'), ('KE', 'Kenya'), ('LS', 'Lesotho'), ('MW', 'Malawi'), ('MZ', 'Mozambique'), ('NA', 'Namibia'), ('RW', 'Rwanda'), ('ZA', 'South Africa'), ('SD', 'Sudan'), ('SS', 'South Sudan'), ('SZ', 'Swaziland'), ('TZ', 'Tanzania'), ('UG', 'Uganda'), ('ZM', 'Zambia'), ('ZW', 'Zimbabwe'))), ('Rest of the world', (('AF', 'Afghanistan'), ('AL', 'Albania'), ('DZ', 'Algeria'), ('AS', 'American Samoa'), ('AD', 'Andorra'), ('AO', 'Angola'), ('AI', 'Anguilla'), ('AQ', 'Antarctica'), ('AG', 'Antigua and Barbuda'), ('AR', 'Argentina'), ('AM', 'Armenia'), ('AW', 'Aruba'), ('AU', 'Australia'), ('AT', 'Austria'), ('AZ', 'Azerbaijan'), ('BS', 'Bahamas'), ('BH', 'Bahrain'), ('BD', 'Bangladesh'), ('BB', 'Barbados'), ('BY', 'Belarus'), ('BE', 'Belgium'), ('BZ', 'Belize'), ('BJ', 'Benin'), ('BM', 'Bermuda'), ('BT', 'Bhutan'), ('BO', 'Bolivia'), ('BA', 'Bosnia and Herzegovina'), ('BV', 'Bouvet Island'), ('BR', 'Brazil'), ('BQ', 'British Antarctic Territory'), ('IO', 'British Indian Ocean Territory'), ('VG', 'British Virgin Islands'), ('BN', 'Brunei'), ('BG', 'Bulgaria'), ('BF', 'Burkina Faso'), ('KH', 'Cambodia'), ('CM', 'Cameroon'), ('CA', 'Canada'), ('CT', 'Canton and Enderbury Islands'), ('CV', 'Cape Verde'), ('KY', 'Cayman Islands'), ('CF', 'Central African Republic'), ('TD', 'Chad'), ('CL', 'Chile'), ('CN', 'China'), ('CX', 'Christmas Island'), ('CC', 'Cocos [Keeling] Islands'), ('CO', 'Colombia'), ('KM', 'Comoros'), ('CG', 'Congo - Brazzaville'), ('CK', 'Cook Islands'), ('CR', 'Costa Rica'), ('HR', 'Croatia'), ('CU', 'Cuba'), ('CY', 'Cyprus'), ('CZ', 'Czech Republic'), ('CI', 'Côte d’Ivoire'), ('DK', 'Denmark'), ('DJ', 'Djibouti'), ('DM', 'Dominica'), ('DO', 'Dominican Republic'), ('NQ', 'Dronning Maud Land'), ('DD', 'East Germany'), ('EC', 'Ecuador'), ('EG', 'Egypt'), ('SV', 'El Salvador'), ('GQ', 'Equatorial Guinea'), ('ER', 'Eritrea'), ('EE', 'Estonia'), ('FK', 'Falkland Islands'), ('FO', 'Faroe Islands'), ('FJ', 'Fiji'), ('FI', 'Finland'), ('FR', 'France'), ('GF', 'French Guiana'), ('PF', 'French Polynesia'), ('TF', 'French Southern Territories'), ('FQ', 'French Southern and Antarctic Territories'), ('GA', 'Gabon'), ('GM', 'Gambia'), ('GE', 'Georgia'), ('DE', 'Germany'), ('GH', 'Ghana'), ('GI', 'Gibraltar'), ('GR', 'Greece'), ('GL', 'Greenland'), ('GD', 'Grenada'), ('GP', 'Guadeloupe'), ('GU', 'Guam'), ('GT', 'Guatemala'), ('GG', 'Guernsey'), ('GN', 'Guinea'), ('GW', 'Guinea-Bissau'), ('GY', 'Guyana'), ('HT', 'Haiti'), ('HM', 'Heard Island and McDonald Islands'), ('HN', 'Honduras'), ('HK', 'Hong Kong SAR China'), ('HU', 'Hungary'), ('IS', 'Iceland'), ('IN', 'India'), ('ID', 'Indonesia'), ('IR', 'Iran'), ('IQ', 'Iraq'), ('IE', 'Ireland'), ('IM', 'Isle of Man'), ('IL', 'Israel'), ('IT', 'Italy'), ('JM', 'Jamaica'), ('JP', 'Japan'), ('JE', 'Jersey'), ('JT', 'Johnston Island'), ('JO', 'Jordan'), ('KZ', 'Kazakhstan'), ('KI', 'Kiribati'), ('KW', 'Kuwait'), ('KG', 'Kyrgyzstan'), ('LA', 'Laos'), ('LV', 'Latvia'), ('LB', 'Lebanon'), ('LR', 'Liberia'), ('LY', 'Libya'), ('LI', 'Liechtenstein'), ('LT', 'Lithuania'), ('LU', 'Luxembourg'), ('MO', 'Macau SAR China'), ('MK', 'Macedonia'), ('MG', 'Madagascar'), ('MY', 'Malaysia'), ('MV', 'Maldives'), ('ML', 'Mali'), ('MT', 'Malta'), ('MH', 'Marshall Islands'), ('MQ', 'Martinique'), ('MR', 'Mauritania'), ('MU', 'Mauritius'), ('YT', 'Mayotte'), ('FX', 'Metropolitan France'), ('MX', 'Mexico'), ('FM', 'Micronesia'), ('MI', 'Midway Islands'), ('MD', 'Moldova'), ('MC', 'Monaco'), ('MN', 'Mongolia'), ('ME', 'Montenegro'), ('MS', 'Montserrat'), ('MA', 'Morocco'), ('MM', 'Myanmar [Burma]'), ('NR', 'Nauru'), ('NP', 'Nepal'), ('NL', 'Netherlands'), ('AN', 'Netherlands Antilles'), ('NT', 'Neutral Zone'), ('NC', 'New Caledonia'), ('NZ', 'New Zealand'), ('NI', 'Nicaragua'), ('NE', 'Niger'), ('NG', 'Nigeria'), ('NU', 'Niue'), ('NF', 'Norfolk Island'), ('KP', 'North Korea'), ('VD', 'North Vietnam'), ('MP', 'Northern Mariana Islands'), ('NO', 'Norway'), ('OM', 'Oman'), ('PC', 'Pacific Islands Trust Territory'), ('PK', 'Pakistan'), ('PW', 'Palau'), ('PS', 'Palestinian Territories'), ('PA', 'Panama'), ('PZ', 'Panama Canal Zone'), ('PG', 'Papua New Guinea'), ('PY', 'Paraguay'), ('YD', 'People&#39;s Democratic Republic of Yemen'), ('PE', 'Peru'), ('PH', 'Philippines'), ('PN', 'Pitcairn Islands'), ('PL', 'Poland'), ('PT', 'Portugal'), ('PR', 'Puerto Rico'), ('QA', 'Qatar'), ('RO', 'Romania'), ('RU', 'Russia'), ('RE', 'Réunion'), ('BL', 'Saint Barthélemy'), ('SH', 'Saint Helena'), ('KN', 'Saint Kitts and Nevis'), ('LC', 'Saint Lucia'), ('MF', 'Saint Martin'), ('PM', 'Saint Pierre and Miquelon'), ('VC', 'Saint Vincent and the Grenadines'), ('WS', 'Samoa'), ('SM', 'San Marino'), ('SA', 'Saudi Arabia'), ('SN', 'Senegal'), ('RS', 'Serbia'), ('CS', 'Serbia and Montenegro'), ('SC', 'Seychelles'), ('SL', 'Sierra Leone'), ('SG', 'Singapore'), ('SK', 'Slovakia'), ('SI', 'Slovenia'), ('SB', 'Solomon Islands'), ('SO', 'Somalia'), ('GS', 'South Georgia and the South Sandwich Islands'), ('KR', 'South Korea'), ('ES', 'Spain'), ('LK', 'Sri Lanka'), ('SR', 'Suriname'), ('SJ', 'Svalbard and Jan Mayen'), ('SE', 'Sweden'), ('CH', 'Switzerland'), ('SY', 'Syria'), ('ST', 'São Tomé and Príncipe'), ('TW', 'Taiwan'), ('TJ', 'Tajikistan'), ('TH', 'Thailand'), ('TL', 'Timor-Leste'), ('TG', 'Togo'), ('TK', 'Tokelau'), ('TO', 'Tonga'), ('TT', 'Trinidad and Tobago'), ('TN', 'Tunisia'), ('TR', 'Turkey'), ('TM', 'Turkmenistan'), ('TC', 'Turks and Caicos Islands'), ('TV', 'Tuvalu'), ('UM', 'U.S. Minor Outlying Islands'), ('PU', 'U.S. Miscellaneous Pacific Islands'), ('VI', 'U.S. Virgin Islands'), ('UA', 'Ukraine'), ('SU', 'Union of Soviet Socialist Republics'), ('AE', 'United Arab Emirates'), ('GB', 'United Kingdom'), ('US', 'United States'), ('ZZ', 'Unknown or Invalid Region'), ('UY', 'Uruguay'), ('UZ', 'Uzbekistan'), ('VU', 'Vanuatu'), ('VA', 'Vatican City'), ('VE', 'Venezuela'), ('VN', 'Vietnam'), ('WK', 'Wake Island'), ('WF', 'Wallis and Futuna'), ('EH', 'Western Sahara'), ('YE', 'Yemen'), ('AX', 'Åland Islands')))], max_length=3)),
                ('country_of_residence', models.CharField(choices=[(None, '---please select---'), ('RUFORUM member countries', (('BW', 'Botswana'), ('BI', 'Burundi'), ('CD', 'Congo - Kinshasa'), ('ET', 'Ethiopia'), ('KE', 'Kenya'), ('LS', 'Lesotho'), ('MW', 'Malawi'), ('MZ', 'Mozambique'), ('NA', 'Namibia'), ('RW', 'Rwanda'), ('ZA', 'South Africa'), ('SD', 'Sudan'), ('SS', 'South Sudan'), ('SZ', 'Swaziland'), ('TZ', 'Tanzania'), ('UG', 'Uganda'), ('ZM', 'Zambia'), ('ZW', 'Zimbabwe'))), ('Rest of the world', (('AF', 'Afghanistan'), ('AL', 'Albania'), ('DZ', 'Algeria'), ('AS', 'American Samoa'), ('AD', 'Andorra'), ('AO', 'Angola'), ('AI', 'Anguilla'), ('AQ', 'Antarctica'), ('AG', 'Antigua and Barbuda'), ('AR', 'Argentina'), ('AM', 'Armenia'), ('AW', 'Aruba'), ('AU', 'Australia'), ('AT', 'Austria'), ('AZ', 'Azerbaijan'), ('BS', 'Bahamas'), ('BH', 'Bahrain'), ('BD', 'Bangladesh'), ('BB', 'Barbados'), ('BY', 'Belarus'), ('BE', 'Belgium'), ('BZ', 'Belize'), ('BJ', 'Benin'), ('BM', 'Bermuda'), ('BT', 'Bhutan'), ('BO', 'Bolivia'), ('BA', 'Bosnia and Herzegovina'), ('BV', 'Bouvet Island'), ('BR', 'Brazil'), ('BQ', 'British Antarctic Territory'), ('IO', 'British Indian Ocean Territory'), ('VG', 'British Virgin Islands'), ('BN', 'Brunei'), ('BG', 'Bulgaria'), ('BF', 'Burkina Faso'), ('KH', 'Cambodia'), ('CM', 'Cameroon'), ('CA', 'Canada'), ('CT', 'Canton and Enderbury Islands'), ('CV', 'Cape Verde'), ('KY', 'Cayman Islands'), ('CF', 'Central African Republic'), ('TD', 'Chad'), ('CL', 'Chile'), ('CN', 'China'), ('CX', 'Christmas Island'), ('CC', 'Cocos [Keeling] Islands'), ('CO', 'Colombia'), ('KM', 'Comoros'), ('CG', 'Congo - Brazzaville'), ('CK', 'Cook Islands'), ('CR', 'Costa Rica'), ('HR', 'Croatia'), ('CU', 'Cuba'), ('CY', 'Cyprus'), ('CZ', 'Czech Republic'), ('CI', 'Côte d’Ivoire'), ('DK', 'Denmark'), ('DJ', 'Djibouti'), ('DM', 'Dominica'), ('DO', 'Dominican Republic'), ('NQ', 'Dronning Maud Land'), ('DD', 'East Germany'), ('EC', 'Ecuador'), ('EG', 'Egypt'), ('SV', 'El Salvador'), ('GQ', 'Equatorial Guinea'), ('ER', 'Eritrea'), ('EE', 'Estonia'), ('FK', 'Falkland Islands'), ('FO', 'Faroe Islands'), ('FJ', 'Fiji'), ('FI', 'Finland'), ('FR', 'France'), ('GF', 'French Guiana'), ('PF', 'French Polynesia'), ('TF', 'French Southern Territories'), ('FQ', 'French Southern and Antarctic Territories'), ('GA', 'Gabon'), ('GM', 'Gambia'), ('GE', 'Georgia'), ('DE', 'Germany'), ('GH', 'Ghana'), ('GI', 'Gibraltar'), ('GR', 'Greece'), ('GL', 'Greenland'), ('GD', 'Grenada'), ('GP', 'Guadeloupe'), ('GU', 'Guam'), ('GT', 'Guatemala'), ('GG', 'Guernsey'), ('GN', 'Guinea'), ('GW', 'Guinea-Bissau'), ('GY', 'Guyana'), ('HT', 'Haiti'), ('HM', 'Heard Island and McDonald Islands'), ('HN', 'Honduras'), ('HK', 'Hong Kong SAR China'), ('HU', 'Hungary'), ('IS', 'Iceland'), ('IN', 'India'), ('ID', 'Indonesia'), ('IR', 'Iran'), ('IQ', 'Iraq'), ('IE', 'Ireland'), ('IM', 'Isle of Man'), ('IL', 'Israel'), ('IT', 'Italy'), ('JM', 'Jamaica'), ('JP', 'Japan'), ('JE', 'Jersey'), ('JT', 'Johnston Island'), ('JO', 'Jordan'), ('KZ', 'Kazakhstan'), ('KI', 'Kiribati'), ('KW', 'Kuwait'), ('KG', 'Kyrgyzstan'), ('LA', 'Laos'), ('LV', 'Latvia'), ('LB', 'Lebanon'), ('LR', 'Liberia'), ('LY', 'Libya'), ('LI', 'Liechtenstein'), ('LT', 'Lithuania'), ('LU', 'Luxembourg'), ('MO', 'Macau SAR China'), ('MK', 'Macedonia'), ('MG', 'Madagascar'), ('MY', 'Malaysia'), ('MV', 'Maldives'), ('ML', 'Mali'), ('MT', 'Malta'), ('MH', 'Marshall Islands'), ('MQ', 'Martinique'), ('MR', 'Mauritania'), ('MU', 'Mauritius'), ('YT', 'Mayotte'), ('FX', 'Metropolitan France'), ('MX', 'Mexico'), ('FM', 'Micronesia'), ('MI', 'Midway Islands'), ('MD', 'Moldova'), ('MC', 'Monaco'), ('MN', 'Mongolia'), ('ME', 'Montenegro'), ('MS', 'Montserrat'), ('MA', 'Morocco'), ('MM', 'Myanmar [Burma]'), ('NR', 'Nauru'), ('NP', 'Nepal'), ('NL', 'Netherlands'), ('AN', 'Netherlands Antilles'), ('NT', 'Neutral Zone'), ('NC', 'New Caledonia'), ('NZ', 'New Zealand'), ('NI', 'Nicaragua'), ('NE', 'Niger'), ('NG', 'Nigeria'), ('NU', 'Niue'), ('NF', 'Norfolk Island'), ('KP', 'North Korea'), ('VD', 'North Vietnam'), ('MP', 'Northern Mariana Islands'), ('NO', 'Norway'), ('OM', 'Oman'), ('PC', 'Pacific Islands Trust Territory'), ('PK', 'Pakistan'), ('PW', 'Palau'), ('PS', 'Palestinian Territories'), ('PA', 'Panama'), ('PZ', 'Panama Canal Zone'), ('PG', 'Papua New Guinea'), ('PY', 'Paraguay'), ('YD', 'People&#39;s Democratic Republic of Yemen'), ('PE', 'Peru'), ('PH', 'Philippines'), ('PN', 'Pitcairn Islands'), ('PL', 'Poland'), ('PT', 'Portugal'), ('PR', 'Puerto Rico'), ('QA', 'Qatar'), ('RO', 'Romania'), ('RU', 'Russia'), ('RE', 'Réunion'), ('BL', 'Saint Barthélemy'), ('SH', 'Saint Helena'), ('KN', 'Saint Kitts and Nevis'), ('LC', 'Saint Lucia'), ('MF', 'Saint Martin'), ('PM', 'Saint Pierre and Miquelon'), ('VC', 'Saint Vincent and the Grenadines'), ('WS', 'Samoa'), ('SM', 'San Marino'), ('SA', 'Saudi Arabia'), ('SN', 'Senegal'), ('RS', 'Serbia'), ('CS', 'Serbia and Montenegro'), ('SC', 'Seychelles'), ('SL', 'Sierra Leone'), ('SG', 'Singapore'), ('SK', 'Slovakia'), ('SI', 'Slovenia'), ('SB', 'Solomon Islands'), ('SO', 'Somalia'), ('GS', 'South Georgia and the South Sandwich Islands'), ('KR', 'South Korea'), ('ES', 'Spain'), ('LK', 'Sri Lanka'), ('SR', 'Suriname'), ('SJ', 'Svalbard and Jan Mayen'), ('SE', 'Sweden'), ('CH', 'Switzerland'), ('SY', 'Syria'), ('ST', 'São Tomé and Príncipe'), ('TW', 'Taiwan'), ('TJ', 'Tajikistan'), ('TH', 'Thailand'), ('TL', 'Timor-Leste'), ('TG', 'Togo'), ('TK', 'Tokelau'), ('TO', 'Tonga'), ('TT', 'Trinidad and Tobago'), ('TN', 'Tunisia'), ('TR', 'Turkey'), ('TM', 'Turkmenistan'), ('TC', 'Turks and Caicos Islands'), ('TV', 'Tuvalu'), ('UM', 'U.S. Minor Outlying Islands'), ('PU', 'U.S. Miscellaneous Pacific Islands'), ('VI', 'U.S. Virgin Islands'), ('UA', 'Ukraine'), ('SU', 'Union of Soviet Socialist Republics'), ('AE', 'United Arab Emirates'), ('GB', 'United Kingdom'), ('US', 'United States'), ('ZZ', 'Unknown or Invalid Region'), ('UY', 'Uruguay'), ('UZ', 'Uzbekistan'), ('VU', 'Vanuatu'), ('VA', 'Vatican City'), ('VE', 'Venezuela'), ('VN', 'Vietnam'), ('WK', 'Wake Island'), ('WF', 'Wallis and Futuna'), ('EH', 'Western Sahara'), ('YE', 'Yemen'), ('AX', 'Åland Islands')))], max_length=3)),
                ('other_names', models.CharField(blank=True, max_length=100, null=True)),
                ('currently_volunteering', models.BooleanField()),
                ('degree_program', models.CharField(max_length=50)),
                ('gpa', models.FloatField(validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(100.0)])),
                ('grading_creteria', models.CharField(choices=[(None, '---please select---'), ('cgpa', 'CGPA'), ('percentage', 'Percentage')], max_length=40)),
                ('distance_to_the_source', models.PositiveSmallIntegerField()),
                ('district_of_birth', models.CharField(blank=True, max_length=50, null=True)),
                ('district_of_residence', models.CharField(blank=True, max_length=50, null=True)),
                ('electricity', models.BooleanField(choices=[(None, '---please select---'), (True, 'Yes'), (False, 'No')])),
                ('employer_support', models.BooleanField(choices=[(None, '---please select---'), (True, 'Yes'), (False, 'No')])),
                ('experience', models.TextField(help_text='Make reference to work experience, knowledge,skills, and abilities that you have in these areas', null=True)),
                ('guardian_occupation', models.CharField(max_length=100)),
                ('guardian_or_spouse_phone', phonenumber_field.modelfields.PhoneNumberField(help_text="Guardian or Spouse's phone contact", max_length=20, region=None)),
                ('guardian_relationship', models.CharField(help_text="If Guardian please indicate Guardian's relationship with you", max_length=100)),
                ('have_been_arrested', models.BooleanField(choices=[(None, '---please select---'), (True, 'Yes'), (False, 'No')], null=True)),
                ('have_history_of_chronic_illness', models.BooleanField(choices=[(None, '---please select---'), (True, 'Yes'), (False, 'No')], help_text='Note that you need to provide the true information. Your medical condition does not in any way disadvantage your application.')),
                ('have_physical_disability', models.BooleanField(choices=[(None, '---please select---'), (True, 'Yes'), (False, 'No')])),
                ('history_of_chronic_illness', models.CharField(blank=True, help_text='please specify', max_length=200, null=True)),
                ('how_many_share_toilet', models.PositiveSmallIntegerField()),
                ('income_source_1', models.CharField(max_length=100)),
                ('income_source_2', models.CharField(blank=True, max_length=100, null=True)),
                ('income_source_3', models.CharField(blank=True, max_length=100, null=True)),
                ('income_source_4', models.CharField(blank=True, max_length=100, null=True)),
                ('institution', models.CharField(max_length=50)),
                ('letter_of_endorsement', models.FileField(blank=True, help_text='Attach evidence (letter of no objection / endorsement explaining what value add graduate studies will bring to the organisation)', null=True, upload_to='')),
                ('member_of_group', models.BooleanField()),
                ('most_significant_contribution', models.TextField()),
                ('name_of_guardian_or_spouse', models.CharField(help_text='If you are living with your guardian or spouse please state name of guardian or spouse', max_length=100)),
                ('name_of_university', models.CharField(max_length=50)),
                ('nearest_major_road', models.CharField(help_text='Name the nearest major road from the nearest trading centre include distance in km.', max_length=50)),
                ('number_of_camels', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('number_of_cattle', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('number_of_chickens', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('number_of_donkeys', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('number_of_goats', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('number_of_sheep', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('number_of_siblings', models.PositiveSmallIntegerField(help_text='How many siblings (brothers and sisters) do you currently have?')),
                ('other_call_source', models.CharField(blank=True, help_text='Please specify', max_length=50, null=True)),
                ('other_water_source', models.CharField(max_length=100)),
                ('own_livestock', models.BooleanField(choices=[(None, '---please select---'), (True, 'Yes'), (False, 'No')])),
                ('pending_high_school_balances', models.BooleanField(choices=[(None, '---please select---'), (True, 'Yes'), (False, 'No')])),
                ('school_balances', models.DecimalField(blank=True, decimal_places=2, help_text='Specify amount', max_digits=65, null=True)),
                ('people_in_house', models.PositiveSmallIntegerField(null=True)),
                ('physical_disability', models.CharField(blank=True, help_text='please specify', max_length=100, null=True)),
                ('primary_certificate', models.FileField(blank=True, help_text='Attach applicable certificate/pass slip', null=True, upload_to='')),
                ('rooms_in_house', models.PositiveSmallIntegerField(null=True)),
                ('secondary_certificate', models.FileField(blank=True, help_text='Attach applicable certificate/pass slip', null=True, upload_to='')),
                ('sector_1', models.CharField(choices=[(None, '---please select---'), ('education', 'Education'), ('finance', 'Finance and Banking'), ('agriculture', 'Agriculture'), ('engineering', 'Engineering'), ('medicine', 'Medicine and Healthcare services'), ('telecoms', 'Telecommunications'), ('religious', 'Religious and social services'), ('public', 'Public service and Government'), ('others', 'Others (specify)')], max_length=50)),
                ('sector_2', models.CharField(choices=[(None, '---please select---'), ('education', 'Education'), ('finance', 'Finance and Banking'), ('agriculture', 'Agriculture'), ('engineering', 'Engineering'), ('medicine', 'Medicine and Healthcare services'), ('telecoms', 'Telecommunications'), ('religious', 'Religious and social services'), ('public', 'Public service and Government'), ('others', 'Others (specify)')], max_length=50)),
                ('sector_3', models.CharField(choices=[(None, '---please select---'), ('education', 'Education'), ('finance', 'Finance and Banking'), ('agriculture', 'Agriculture'), ('engineering', 'Engineering'), ('medicine', 'Medicine and Healthcare services'), ('telecoms', 'Telecommunications'), ('religious', 'Religious and social services'), ('public', 'Public service and Government'), ('others', 'Others (specify)')], max_length=50)),
                ('sketch_map', models.FileField(blank=True, help_text='Attach sketch map to allow validation team ease of tracking your home', null=True, upload_to='')),
                ('telephone_contacts', phonenumber_field.modelfields.PhoneNumberField(help_text='Include Mobile phone number if available. If not available include for any relative / neighbor / local administrator closest to you', max_length=20, region=None)),
                ('telephone_owner', models.CharField(help_text='Name of telephone number owner', max_length=100)),
                ('tertiary_certificate', models.FileField(blank=True, help_text='Attach applicable certificate/pass slip', null=True, upload_to='')),
                ('toilet_type', models.CharField(choices=[(None, '---please select---'), ('flush and pour', 'Flush and pour'), ('vip', 'VIP latrine'), ('covered pit', 'Covered pit latrine'), ('uncovered pit', 'Uncovered pit latrine'), ('composting', 'Composting toilet'), ('none', 'No facility / bush / field'), ('ecosan', 'Ecosan')], max_length=14)),
                ('university_certificate', models.FileField(blank=True, help_text='Attach applicable certificate/transcript', null=True, upload_to='')),
                ('village_of_birth', models.CharField(blank=True, max_length=50, null=True)),
                ('village_of_residence', models.CharField(max_length=50, null=True)),
                ('water_source', models.CharField(max_length=20)),
                ('year_of_completion', models.PositiveSmallIntegerField(blank=True, choices=[(2020, 2020), (2019, 2019), (2018, 2018), (2017, 2017), (2016, 2016), (2015, 2015), (2014, 2014), (2013, 2013), (2012, 2012), (2011, 2011), (2010, 2010), (2009, 2009), (2008, 2008), (2007, 2007), (2006, 2006), (2005, 2005), (2004, 2004), (2003, 2003), (2002, 2002), (2001, 2001), (2000, 2000), (1999, 1999), (1998, 1998), (1997, 1997), (1996, 1996), (1995, 1995), (1994, 1994), (1993, 1993), (1992, 1992), (1991, 1991), (1990, 1990)], null=True)),
                ('other_assets', models.CharField(blank=True, max_length=50, null=True)),
                ('other_floor', models.CharField(blank=True, max_length=50, null=True)),
                ('other_house_wall', models.CharField(blank=True, max_length=50, null=True)),
                ('other_roofing', models.CharField(blank=True, max_length=50, null=True)),
                ('other_sector_1', models.CharField(blank=True, help_text="Only fill in if you answered 'Others' above", max_length=50, null=True)),
                ('other_sector_2', models.CharField(blank=True, help_text="Only fill in if you answered 'Others' above", max_length=50, null=True)),
                ('other_sector_3', models.CharField(blank=True, help_text="Only fill in if you answered 'Others' above", max_length=50, null=True)),
                ('home_assets', models.ManyToManyField(help_text='tick all applicable', to='scholarships.Homeassets')),
                ('income_contrib3efc', models.ManyToManyField(help_text='Select up to 3', to='scholarships.Incomecontributor')),
                ('type_of_floor', models.ManyToManyField(help_text='tick all applicable', to='scholarships.Typeoffloor')),
                ('type_of_house_wall', models.ManyToManyField(help_text='tick all applicable', to='scholarships.Typeofhousewall')),
                ('type_of_roofing', models.ManyToManyField(help_text='select any', to='scholarships.Typeofroofingmaterial')),
            ],
        ),
        migrations.CreateModel(
            name='Mastercardeducation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('particular', models.CharField(max_length=18, verbose_name='Education Level')),
                ('name_of_school', models.CharField(max_length=50)),
                ('location_of_school', models.CharField(help_text='Location of School (District)', max_length=32)),
                ('school_ownership', models.CharField(max_length=50)),
                ('total_score', models.PositiveSmallIntegerField(blank=True, help_text='points / aggregate / grade / CGPA', null=True)),
                ('year_of_completion', models.PositiveSmallIntegerField(blank=True, choices=[(2020, 2020), (2019, 2019), (2018, 2018), (2017, 2017), (2016, 2016), (2015, 2015), (2014, 2014), (2013, 2013), (2012, 2012), (2011, 2011), (2010, 2010), (2009, 2009), (2008, 2008), (2007, 2007), (2006, 2006), (2005, 2005), (2004, 2004), (2003, 2003), (2002, 2002), (2001, 2001), (2000, 2000), (1999, 1999), (1998, 1998), (1997, 1997), (1996, 1996), (1995, 1995), (1994, 1994), (1993, 1993), (1992, 1992), (1991, 1991), (1990, 1990)], null=True)),
                ('average_cost_of_fees_per_year', models.PositiveIntegerField(blank=True, null=True)),
                ('certificate', models.FileField(help_text='please attach your certificate', null=True, upload_to='')),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scholarships.Scholarshipapplication')),
            ],
            options={
                'unique_together': {('particular', 'application')},
            },
        ),
        migrations.CreateModel(
            name='Additionalfundingsource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('already_funded', models.IntegerField()),
                ('source_of_funding', models.CharField(max_length=200)),
                ('amount_already_provided', models.IntegerField(blank=True, null=True)),
                ('scholarship_need', models.IntegerField()),
                ('funding_type', models.CharField(max_length=8)),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scholarships.Scholarshipapplication')),
            ],
            options={
                'unique_together': {('application', 'funding_type')},
            },
        ),
    ]
